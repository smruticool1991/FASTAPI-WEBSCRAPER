# Production Docker Compose Configuration
version: '3.8'

services:
  website-analyzer-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: website-analyzer-api-prod
    ports:
      - "8000:8000"
    environment:
      # Production environment variables
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LOG_LEVEL=WARNING
      
      # Performance tuning
      - MAX_CONCURRENT_REQUESTS=20
      - DEFAULT_TIMEOUT=30
      - RATE_LIMIT_MAX_CONCURRENT=15
      - RATE_LIMIT_DELAY=0.5
      
    volumes:
      - ./logs:/app/logs
      
    restart: always
    
    # Production resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      replicas: 1
    
    # Health check with tighter intervals
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: website-analyzer-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M

  # PostgreSQL for storing analysis results
  postgres:
    image: postgres:15-alpine
    container_name: website-analyzer-postgres-prod
    environment:
      - POSTGRES_DB=website_analyzer
      - POSTGRES_USER=analyzer
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_change_me}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: website-analyzer-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - website-analyzer-api
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: website-analyzer-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: website-analyzer-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: website_analyzer_network